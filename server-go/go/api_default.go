/*
 * Swagger Petstore
 *
 * A sample API that uses a petstore as an example to demonstrate features in the OpenAPI 3.0 specification
 *
 * API version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// DefaultPetStoreController binds http requests to an api service and writes the service results to the http response
type DefaultPetStoreController struct {
	service DefaultPetStoreServicer
	errorHandler ErrorHandler
}

// DefaultPetStoreOption for how the controller is set up.
type DefaultPetStoreOption func(*DefaultPetStoreController)

// WithDefaultPetStoreErrorHandler inject ErrorHandler into controller
func WithDefaultPetStoreErrorHandler(h ErrorHandler) DefaultPetStoreOption {
	return func(c *DefaultPetStoreController) {
		c.errorHandler = h
	}
}

// NewDefaultPetStoreController creates a default api controller
func NewDefaultPetStoreController(s DefaultPetStoreServicer, opts ...DefaultPetStoreOption) Router {
	controller := &DefaultPetStoreController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DefaultPetStoreController
func (c *DefaultPetStoreController) Routes() Routes {
	return Routes{ 
		{
			"AddPet",
			strings.ToUpper("Post"),
			"/pets",
			c.AddPet,
		},
		{
			"DeletePet",
			strings.ToUpper("Delete"),
			"/pets/{id}",
			c.DeletePet,
		},
		{
			"FindPetByID",
			strings.ToUpper("Get"),
			"/pets/{id}",
			c.FindPetByID,
		},
		{
			"FindPets",
			strings.ToUpper("Get"),
			"/pets",
			c.FindPets,
		},
	}
}

// AddPet - 
func (c *DefaultPetStoreController) AddPet(w http.ResponseWriter, r *http.Request) {
	newPetParam := NewPet{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&newPetParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertNewPetRequired(newPetParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AddPet(r.Context(), newPetParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DeletePet - 
func (c *DefaultPetStoreController) DeletePet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseInt64Parameter(params["id"], true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}

	result, err := c.service.DeletePet(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// FindPetByID - 
func (c *DefaultPetStoreController) FindPetByID(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseInt64Parameter(params["id"], true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}

	result, err := c.service.FindPetByID(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// FindPets - 
func (c *DefaultPetStoreController) FindPets(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	tagsParam := strings.Split(query.Get("tags"), ",")
	limitParam, err := parseInt32Parameter(query.Get("limit"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.FindPets(r.Context(), tagsParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

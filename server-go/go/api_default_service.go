/*
 * Swagger Petstore
 *
 * A sample API that uses a petstore as an example to demonstrate features in the OpenAPI 3.0 specification
 *
 * API version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"errors"
	"log"
	"net/http"
)

// DefaultPetStoreService is a service that implements the logic for the DefaultPetStoreServicer
// This service should implement the business logic for every endpoint for the DefaultPetStore API.
// Include any external packages or services that will be required by this service.
type DefaultPetStoreService struct {
}

// NewDefaultPetStoreService creates a default api service
func NewDefaultPetStoreService() DefaultPetStoreServicer {
	return &DefaultPetStoreService{}
}


var Pet1 = Pet{Name: "Tom", Id: 1}
var Pet2 = Pet{Name: "Jerry", Id: 2}
var Pet3 = Pet{Name: "Tommy", Id: 3}
var Pet4 = Pet{Name: "Roger", Id: 4}
var Pet5 = Pet{Name: "Jeremy", Id: 5}
var Pet6 = Pet{Name: "Poodle", Id: 6}
var Pet7 = Pet{Name: "Simon", Id: 7}
var Pet8 = Pet{Name: "Puffy", Id: 8}
var Pet9 = Pet{Name: "Bubbles", Id: 9}
var Pet10 = Pet{Name: "Daisy", Id: 10}
var Pets = []Pet{Pet1, Pet2, Pet3, Pet4, Pet5, Pet6, Pet7, Pet8, Pet9, Pet10}

// AddPet - 
func (s *DefaultPetStoreService) AddPet(ctx context.Context, newPet NewPet) (ImplResponse, error) {
	// TODO - update AddPet with the required logic for this service method.
	// Add api_default_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, Pet{}) or use other options such as http.Ok ...
	//return Response(200, Pet{}), nil

	//TODO: Uncomment the next line to return response Response(0, Error{}) or use other options such as http.Ok ...
	//return Response(0, Error{}), nil
	finalPet := Pet{Name: newPet.Name, Tag: newPet.Tag, Id: int64(len(Pets)+1)}
	log.Print(finalPet)
	Pets = append(Pets, finalPet)
	return Response(http.StatusOK, finalPet), nil
}

// DeletePet - 
func (s *DefaultPetStoreService) DeletePet(ctx context.Context, id int64) (ImplResponse, error) {
	// TODO - update DeletePet with the required logic for this service method.
	// Add api_default_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(204, {}) or use other options such as http.Ok ...
	//return Response(204, nil),nil

	//TODO: Uncomment the next line to return response Response(0, Error{}) or use other options such as http.Ok ...
	//return Response(0, Error{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("DeletePet method not implemented")
}

// FindPetByID - 
func (s *DefaultPetStoreService) FindPetByID(ctx context.Context, id int64) (ImplResponse, error) {
	// TODO - update FindPetByID with the required logic for this service method.
	// Add api_default_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, Pet{}) or use other options such as http.Ok ...
	//return Response(200, Pet{}), nil

	//TODO: Uncomment the next line to return response Response(0, Error{}) or use other options such as http.Ok ...
	//return Response(0, Error{}), nil

	return Response(http.StatusOK, Pets[id-1]), nil
}

// FindPets - 
func (s *DefaultPetStoreService) FindPets(ctx context.Context, tags []string, limit int32) (ImplResponse, error) {
	// TODO - update FindPets with the required logic for this service method.
	// Add api_default_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, []Pet{}) or use other options such as http.Ok ...
	//return Response(200, []Pet{}), nil

	//TODO: Uncomment the next line to return response Response(0, Error{}) or use other options such as http.Ok ...
	//return Response(0, Error{}), nil

	return Response(http.StatusOK, Pets),nil
}
